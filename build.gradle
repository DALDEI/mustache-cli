plugins {
  id "com.jfrog.bintray" version "1.1"
}

apply plugin: "java"
apply plugin: "maven-publish"
apply plugin: 'eclipse'
apply plugin: 'application'
mainClassName = 'org.xmlsh.tools.mustache.cli.main.Main'
applicationName = 'mustache-cli'

apply plugin: 'ivy-publish'
apply plugin: 'maven-publish'
group = "org.xmlsh"
version = '1.1'
ext {
  releaseVersion = "release-$version"
  vcsVersion = "v$version"
}

 
task wrapper( type: Wrapper ) {
  gradleVersion = '2.4'
}


repositories {
    mavenLocal()
    jcenter()
}

sourceSets.all { set ->
    def jarTask = task("${set.name}Jar", type: Jar) {
        baseName = baseName + "-$set.name"
        from set.output
    }
    artifacts {
        archives jarTask
    }
}

eclipse {
    classpath.downloadJavadoc = true
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

jar {
    manifest {
        attributes 'Implementation-Title': 'mustache CLI',
                   'Implementation-Version': version
    }
}



sourceSets {
    main
}


List sharedDeps = [
    'commons-collections:commons-collections:3.1',
    'com.github.spullara.mustache.java:compiler:0.9+',
    'com.fasterxml.jackson.core:jackson-databind:2.0+',
	'org.apache.logging.log4j:log4j-api:2.+',
	'org.apache.logging.log4j:log4j-core:2.+'
    
     ]


dependencies {
    
          
    compile sharedDeps  
    
    testCompile 'junit:junit:4.9' 
    testCompile 'com.github.stefanbirkner:system-rules:1.8.0'
    
    testCompile sourceSets.main.output
	
   
}

test {
    systemProperties 'property': 'value'
}

jar {
    from sourceSets.main.output
}
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar {
                classifier "sources"
            }
          pom.withXml {
        asNode().appendNode('description', 
			'A CLI for mustache.java')
          }
        }
        ivyJava(IvyPublication) {
            from components.java
            artifact(sourceJar) {
                type "source"
                conf "runtime"
            }
            descriptor.withXml {
                asNode().info[0].appendNode('description', 'A CLI for mustache.java')
            }
        }
    }
}

if( hasProperty("bintrayUser") )
bintray {
  
  user = project.getProperty("bintrayUser")
  key = project.getProperty("bintrayKey")
  

  filesSpec {
     from installDist.outputs
     into 'org/xmlsh/'
  }
  dryRun = false //Whether to run this as dry-run, without deploying
  publish = false //If version should be auto published after an upload
  //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
  
  
      pkg {
      repo = 'maven'
      name = 'mustache-cli'
      userOrg = ''
      desc = 'A CLI for mustache.java'
      websiteUrl = 'https://github.com/daldei/mustache-cli'
      issueTrackerUrl = 'https://github.com/daldei/mustache-cli/issues'
      vcsUrl = 'https://github.com/daldei/mustache-cli.git'
      licenses = ['BSD Simplified']
      labels = ['json', 'mustache', 'mustache.java' , 'java' , 'cli']
      publicDownloadNumbers = true
      // attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
      //Optional version descriptor
      version {
          name = "$releaseVersion" //Bintray logical version name
        //  desc = //Optional - Version-specific description'
        //  released  = //Optional - Date of the version release. 2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
          vcsTag = "$vcsVersion"
        //  attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
          //Optional configuration for GPG signing
      //    gpg {
     //         sign = true //Determines whether to GPG sign the files. The default is false
    //          passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
    //      }
          //Optional configuration for Maven Central sync of the version
       //   mavenCentralSync {
       //       sync = true //Optional (true by default). Determines whether to sync the version to Maven Central.
       //       user = 'userToken' //OSS user token
      //        password = 'paasword' //OSS user password
      //        close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
      //    }
      }
  }
}

